{"uid":"66727f862f42d9a8","name":"人员实力查看接口","fullName":"case.XPAAS.test_login#test_login","historyId":"f52cb8ca117f6455a54e048fff628e72","time":{"start":1730448835443,"stop":1730448843490,"duration":8047},"status":"broken","statusMessage":"UnboundLocalError: local variable 'driver' referenced before assignment","statusTrace":"@allure.epic(\"Z05\")\n    @allure.feature(\"框架\")\n    @allure.story(\"登录\")\n    #class Test_login():\n    \n    @allure.title(\"人员实力查看接口\")\n    \n    def test_login():\n        try:\n            # 打开网站\n>           driver = webdriver.Chrome()\n\ncase\\XPAAS\\test_login.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nc:\\Users\\xiqi\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:69: in __init__\n    super().__init__(DesiredCapabilities.CHROME['browserName'], \"goog\",\nc:\\Users\\xiqi\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:92: in __init__\n    super().__init__(\nc:\\Users\\xiqi\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:270: in __init__\n    self.start_session(capabilities, browser_profile)\nc:\\Users\\xiqi\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:363: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\nc:\\Users\\xiqi\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:428: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000158EC0B66E0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...07FF68277E17F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFE7BF27374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFE7CDDCC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get('methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"{}.{}\".format(frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 126\nE       Current browser version is 130.0.6723.71 with binary path C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF68280EEB2+31554]\nE       \t(No symbol) [0x00007FF682787EE9]\nE       \t(No symbol) [0x00007FF68264872A]\nE       \t(No symbol) [0x00007FF682686ED2]\nE       \t(No symbol) [0x00007FF682686008]\nE       \t(No symbol) [0x00007FF68267FCC8]\nE       \t(No symbol) [0x00007FF68267BB3B]\nE       \t(No symbol) [0x00007FF6826C8794]\nE       \t(No symbol) [0x00007FF6826C7DF0]\nE       \t(No symbol) [0x00007FF6826BCDD3]\nE       \t(No symbol) [0x00007FF68268A33B]\nE       \t(No symbol) [0x00007FF68268AED1]\nE       \tGetHandleVerifier [0x00007FF682B18B2D+3217341]\nE       \tGetHandleVerifier [0x00007FF682B65AF3+3532675]\nE       \tGetHandleVerifier [0x00007FF682B5B0F0+3489152]\nE       \tGetHandleVerifier [0x00007FF6828BE786+750614]\nE       \t(No symbol) [0x00007FF68279376F]\nE       \t(No symbol) [0x00007FF68278EB24]\nE       \t(No symbol) [0x00007FF68278ECB2]\nE       \t(No symbol) [0x00007FF68277E17F]\nE       \tBaseThreadInitThunk [0x00007FFE7BF27374+20]\nE       \tRtlUserThreadStart [0x00007FFE7CDDCC91+33]\n\nc:\\Users\\xiqi\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: SessionNotCreatedException\n\nDuring handling of the above exception, another exception occurred:\n\n    @allure.epic(\"Z05\")\n    @allure.feature(\"框架\")\n    @allure.story(\"登录\")\n    #class Test_login():\n    \n    @allure.title(\"人员实力查看接口\")\n    \n    def test_login():\n        try:\n            # 打开网站\n            driver = webdriver.Chrome()\n            driver.get('http://192.168.100.119:20100/')\n    \n            # 创建显示等待对象\n            wait_obj = WebDriverWait(driver, 10)\n            # 设置等待条件（等搜索结果的div出现）\n            wait_obj.until(expected_conditions.presence_of_element_located\n                        ((By.CLASS_NAME, 'el-input__inner')))\n    \n            # 登录\n            driver.find_elements(By.CLASS_NAME, \"el-input__inner\")[0].send_keys('admin')\n            driver.find_elements(By.CLASS_NAME, \"el-input__inner\")[1].send_keys('Xqwl8888')\n            driver.find_element(By.CLASS_NAME, \"login_btn\").click()\n            print('****************登录成功****************')\n            time.sleep(5)\n            driver.get_screenshot_as_file(\"./screenshot/successful.png\")\n    \n        except (ValueError):\n            print('****************登录失败****************')\n            driver.get_screenshot_as_file(\"./logs/screenshot/fail.png\")\n    \n        finally:\n            time.sleep(5)\n>           driver.quit()\nE           UnboundLocalError: local variable 'driver' referenced before assignment\n\ncase\\XPAAS\\test_login.py:42: UnboundLocalError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"feature","value":"框架"},{"name":"epic","value":"Z05"},{"name":"story","value":"登录"},{"name":"parentSuite","value":"case.XPAAS"},{"name":"suite","value":"test_login"},{"name":"host","value":"DESKTOP-UUGKLIK"},{"name":"thread","value":"2684-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"case.XPAAS.test_login"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"66727f862f42d9a8.json","parameterValues":[]}